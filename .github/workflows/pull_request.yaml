name: pull_request

on: [pull_request]

env:
  DB_HOST: localhost
  DB_PORT: 5432
  DB_NAME: postgres
  DB_USERNAME: postgres
  DB_PASSWORD: postgres
  DB_SCHEMA: dump_server

jobs:
  eslint:
    name: Run eslint
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: ./.github/actions/init-npm
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm ci

      - name: Run linters
        uses: wearerequired/lint-action@v2
        with:
          github_token: ${{ secrets.github_token }}
          eslint: true
          prettier: true
          eslint_extensions: ts

  openapi-lint:
    name: Run OpenAPI lint Check
    runs-on: ubuntu-latest

    steps:
      - name: Check out TS Project Git repository
        uses: actions/checkout@v4

      - name: Init nodejs
        uses: ./.github/actions/init-npm

      - name: OpenAPI Lint Checks
        run: npx @redocly/cli lint --format=github-actions openapi3.yaml

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  tests:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [20.x, 22.x]

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD}}
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: ./.github/actions/init-npm
        with:
          node-version: ${{ matrix.node }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install pg client
        run: |
          sudo apt-get update && sudo apt-get install -y lsb-release
          echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list > /dev/null
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /usr/share/keyrings/postgresql-keyring.asc > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/postgresql-keyring.asc] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y postgresql-client
        shell: bash

      - name: Create schema
        run: psql -h $DB_HOST -d $DB_NAME -U $DB_USERNAME -c 'CREATE SCHEMA dump_server;'
        env:
          PGPASSWORD: ${{ env.DB_PASSWORD }}

      - name: Create extension
        run: psql -h $DB_HOST -d $DB_NAME -U $DB_USERNAME -c 'CREATE EXTENSION IF NOT EXISTS uuid-ossp;'
        env:
          PGPASSWORD: ${{ env.DB_PASSWORD }}

      - name: Run migrations
        run: npm run migration:run

      - name: Run tests
        run: npm run test

      - uses: actions/upload-artifact@v4
        with:
          name: Test Reporters Node-${{ matrix.node }}
          path: reports/**

  build_image:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: build Docker image
        run: docker build -t test-build:latest .

      - name: build migrations Docker image
        run: docker build -f ./migrations.Dockerfile -t test-migrations-build:latest .
